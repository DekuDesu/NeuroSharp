@using NeuroSharp.NEAT
@using System.IO;
@using System.Threading;
@using NeuroSharp;

<div class="flex" style=@("max-height: 90vh; max-width: 80vw; overflow-y: scroll;overflow-x: scroll;")>
    <TabGroup Class="" Style="overflow-x: scroll; min-height: 90vh;"
              @ref=@TabGroupRef
              ContentStyle="">
        @{

            TabGroupRef.AddTab("View Network", "text-align: left;");
            TabGroupRef.AddTab("Settings");
            TabGroupRef.AddTab("Console");
            TabGroupRef.AddTab("Organisms", "text-align: left;");
            TabGroupRef.AddTab("Species", "text-align: left;");
            TabGroupRef.AddTab("Generation", "text-align: left;");
            switch (TabGroupRef.ActiveTab)
            {
                case 0:
                    <div class="btn-group">
                        <button class="btn btn-@(buttonTypes[selectedRightItem % buttonTypes.Length]) btn-lg dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            @((MarkupString)right.Name)
                        </button>
                        <ul class="dropdown-menu" style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                            @for (int i = 0; i < controller.Generation.Length; i++)
                            {
                                int x = i;
                                <li>
                                    <button class=@networkButtonColors[x % networkButtonColors.Length] type="button" @onclick="()=>selectedRightItem = x">@((MarkupString)controller.Generation[i].Name)</button>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="btn-group w-100 my-2" role="group" aria-label="Basic example">
                        <button type="button" class="btn btn-outline-primary" @onclick=ResetRight title="Reset Network"><span class="oi oi-reload"></span></button>
                        <button type="button" class="btn btn-outline-primary" @onclick=MutateRight title="Mutate Network"><span class="oi oi-bug"></span></button>
                        <button type="button" class="btn btn-outline-primary" @onclick=AddNodeRight title="Add Node">&#10010;  <span class="oi oi-target"></span></button>
                        <button type="button" class="btn btn-outline-primary" @onclick=AddConnectionRight title="Add Connection">&#10010; <span class="oi oi-fork"></span></button>
                        <button type="button" class="btn btn-outline-primary" @onclick=ShowMatriceRight title="Show Matrices"><span class="oi oi-grid-three-up"></span></button>
                    </div>

                    <TabGroup @ref=@SelectedNetworkTabGroup>
                        @{
                            SelectedNetworkTabGroup.AddTab("View");
                            SelectedNetworkTabGroup.AddTab("Genotype", "text-align: left;");
                            SelectedNetworkTabGroup.AddTab("Matrices");
                            switch (SelectedNetworkTabGroup.ActiveTab)
                            {
                                case 0:
                                    <NetworkCanvas Network=@right></NetworkCanvas>
                                    break;
                                case 1:
                                    @foreach (var item in right.Innovations)
                                    {
                                        <GenoTypeEntry Innovation=@item></GenoTypeEntry>
                                    }
                                    break;
                                case 2:
                                    foreach (var item in right.Matrices)
                                    {
                                        IMatrix<double> matrix = item;
                                        <div class="mx-2 my-2">
                                            <MatrixCanvas Matrix=matrix BackgroundColor=@Colors.White FillMatrixBackground=true></MatrixCanvas>
                                        </div>
                                    }
                                    break;
                            }
                        }
                    </TabGroup>
                    break;
                case 1:
                    <div class="" style="overflow-y: scroll;  min-width: 282px; overflow-x: hidden; text-align: center;">
                        <div class="btn-group w-100 my-2" role="group" aria-label="Basic example">
                            <button type="button" class="btn btn-outline-primary" @onclick=RedrawCanvas tite="Refresh Screen">
                                <div>
                                    <span class="oi oi-reload"></span>
                                    <span class="oi oi-brush"></span>
                                </div>
                                Refresh
                            </button>
                            <button type="button" class="btn btn-outline-primary" @onclick=ResetAll title="Reset All Networks">
                                <div>
                                    <span class="oi oi-reload"></span>
                                    <span class="oi oi-fork"></span>
                                </div>
                                Reset Networks
                            </button>
                            <button type="button" class="btn btn-outline-primary" @onclick=ClearConsole title="Clear Console">
                                <div>
                                    <span class="oi oi-reload"></span>
                                    <span class="oi oi-terminal"></span>
                                </div>
                                Clear Console
                            </button>
                        </div>
                        <ul class="list-group my-4" style="width: 97%; text-align: center;">
                            <li class="list-group-item list-group-item-secondary">
                                <h4>Species Controller</h4>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <div class="btn-group w-100 my-2" role="group" aria-label="Basic example">
                                    <button type="button" class="btn btn-outline-primary" @onclick=RedrawCanvas tite="Refresh Screen">
                                        Reset
                                    </button>
                                    <button type="button" class="btn btn-outline-primary" @onclick=controller.SpeciateGeneration title="Speciate">
                                        Speciate
                                    </button>
                                    <button type="button" class="btn btn-outline-primary">
                                        Evaluate
                                    </button>
                                </div>
                            </li>
                        </ul>
                        <ul class="list-group my-4" style="width: 97%; text-align: center;">
                            <li class="list-group-item list-group-item-secondary">
                                <h4>Breeding</h4>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <div class="btn-group w-100 my-2" role="group" aria-label="Basic example">
                                    <button type="button" class="btn btn-outline-primary" @onclick=Breed>Breed</button>
                                </div>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>Parent Fitness</h5>
                                <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" @onclick="()=>parentFitnessState = FitnessState.LeftMoreFit">
                                    <label class="btn btn-outline-primary" for="btnradio1">@((MarkupString)left.Name)</label>

                                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onclick="()=>parentFitnessState = FitnessState.EqualFitness" checked>
                                    <label class="btn btn-outline-primary" for="btnradio2">Equal Fitness</label>

                                    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @onclick="()=>parentFitnessState = FitnessState.RightMoreFit">
                                    <label class="btn btn-outline-primary" for="btnradio3">@((MarkupString)right.Name)</label>
                                </div>
                            </li>
                            @{
                                var breakdown = ((DefaultNetworkComparer)controller.NetworkComparer).GenerateVerboseCompatibility(left, right);
                            }
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Current Compatibility
                                    <span class="badge bg-dark">𝛿 &asymp; @Math.Round(breakdown.Compatibility, 2) @( breakdown.Compatibility<=controller.CompatibilityThreashold ? (MarkupString)$"&#10004;" : (MarkupString)$"&#10006;")</span>
                                </h5>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <td>
                                                Excess
                                            </td>
                                            <td>
                                                Disjoint
                                            </td>
                                            <td style="text-decoration: overline;" title="Average weight">
                                                Weight
                                            </td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>
                                                <span class="badge bg-dark">𝚬 &asymp; @breakdown.Excess</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-dark">𝓓 &asymp; @breakdown.Disjoint</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-dark"><span style="text-decoration:overline; font-weight: bold;">W</span> &asymp; @Math.Round(breakdown.AverageWeightDifference, 3)</span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Compatibility Threashold
                                    <span class="badge bg-dark">𝛿<i><sub>t</sub></i> &asymp; @controller.CompatibilityThreashold</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@controller.CompatibilityThreashold min=@(0d) max=@(4d) step=@(0.001d) id="customRange3">
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Excess Modifier
                                    <span class="badge bg-dark">C<i><sub>1</sub></i> &asymp; @controller.NetworkComparer.ExcessCoefficient</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@controller.NetworkComparer.ExcessCoefficient min=@(0d) max=@(4d) step=@(0.001d) id="customRange3">
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Disjoint Modifier
                                    <span class="badge bg-dark">C<i><sub>2</sub></i> &asymp; @controller.NetworkComparer.DisjointCoefficient</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@controller.NetworkComparer.DisjointCoefficient min=@(0d) max=@(4d) step=@(0.001d) id="customRange3">
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Weight Diff. Modifier
                                    <span class="badge bg-dark">C<i><sub>3</sub></i> &asymp; @controller.NetworkComparer.WeightCoefficient</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@controller.NetworkComparer.WeightCoefficient min=@(0d) max=@(4d) step=@(0.001d) id="customRange3">
                            </li>
                        </ul>
                        <ul class="list-group my-4" style="width: 97%; text-align: center;">
                            <li class="list-group-item list-group-item-secondary">
                                <h4>Mutation Settings</h4>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Mutations Per Click
                                    <span class="badge bg-dark">@MutationsPerClick</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@MutationsPerClick min=@MinMutationsPC max=@MaxMutationsPC step=@MutationsPCStep id="customRange3">

                            </li>
                            <li class="list-group-item  align-items-center form-group">
                                <h5>
                                    Weight Modifier
                                    <span class="badge bg-dark">@Math.Round(MutationModifier * 100d, 2)%</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@MutationModifier min=@MinMutationModifier max=@MaxMutationModifier step="0.001" id="customRange3">
                            </li>
                        </ul>
                        <ul class="list-group my-4" style="width: 97%; text-align: center;">
                            <li class="list-group-item list-group-item-secondary">
                                <h4>Weight Chances</h4>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <div class="progress my-2">
                                    <div class="progress-bar" role="progressbar" style=@($"width: {ReassignChanceProgressSize}%;") aria-valuemin="0" aria-valuemax="100">@(ReassignChanceProgressSize)%</div>
                                    <div class="progress-bar bg-success" role="progressbar" style=@($"width: {PerturbChanceProgressSize}%;") aria-valuemin="0" aria-valuemax="100">@(PerturbChanceProgressSize)%</div>
                                    <div class="progress-bar bg-danger" role="progressbar" style=@($"width: {RemainingWeightProgressSize}%;") aria-valuemin="0" aria-valuemax="100">@(RemainingWeightProgressSize)%</div>
                                </div>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Reassign Weight &#127922;
                                    <span class="badge bg-primary">@Math.Round(ReassignChance * 100d, 2)%</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@ReassignChance min=@MinReassignChance max=@MaxReassignChance step="0.001" id="customRange3">
                            </li>
                            <li class="list-group-item  align-items-center form-group">
                                <h5>
                                    Modify Weight &#127922;
                                    <span class="badge bg-success">@Math.Round(PerturbChance * 100d, 2)%</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@PerturbChance min=@MinPerturbChance max=@MaxPerturbChance step="0.001" id="customRange3">
                            </li>
                        </ul>
                        <ul class="list-group my-4" style="width: 97%; text-align: center;">
                            <li class="list-group-item list-group-item-secondary">
                                <h4>Mutation Chances</h4>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <div class="progress my-2">
                                    <div class="progress-bar" role="progressbar" style=@($"width: {AddNodeProgressSize}%;") aria-valuemin="0" aria-valuemax="100">@(AddNodeProgressSize)%</div>
                                    <div class="progress-bar bg-success" role="progressbar" style=@($"width: {AddConnectionProgressSize}%;") aria-valuemin="0" aria-valuemax="100">@(AddConnectionProgressSize)%</div>
                                    <div class="progress-bar bg-danger" role="progressbar" style=@($"width: {RemainingProgressSize}%;") aria-valuemin="0" aria-valuemax="100">@(RemainingProgressSize)%</div>
                                </div>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Add Node &#127922;
                                    <span class="badge bg-primary">@Math.Round(AddNodeChance * 100d, 2)%</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@AddNodeChance min=@MinAddNodeChance max=@MaxAddNodeChance step="0.001" id="customRange3">
                            </li>
                            <li class="list-group-item  align-items-center form-group">
                                <h5>
                                    Add Connection &#127922;
                                    <span class="badge bg-success">@Math.Round(AddConnectionChance * 100d, 2)%</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@AddConnectionChance min=@MinAddConnectionChance max=@MaxAddConnectionChance step="0.001" id="customRange3">
                            </li>
                        </ul>
                        <ul class="list-group my-4" style="width: 97%; text-align: center;">
                            <li class="list-group-item list-group-item-secondary">
                                <h4>Network Setup</h4>
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Max Networks
                                    <span class="badge bg-dark">@startingMaxNetworks</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@startingMaxNetworks min=@(2) max=@maxNetworks step=@(1) id="customRange3">
                            </li>
                            <li class="list-group-item align-items-center form-group">
                                <h5>
                                    Input Nodes
                                    <span class="badge bg-dark">@startingInputNodes</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@startingInputNodes min=@minNodes max=@maxNodes step=@(1) id="customRange3">
                            </li>
                            <li class="list-group-item  align-items-center form-group">
                                <h5>
                                    Output Nodes
                                    <span class="badge bg-dark">@startingOutputNodes</span>
                                </h5>
                                <input type="range" class="form-range" @bind-value=@startingOutputNodes min=@minNodes max=@maxNodes step=@(1) id="customRange3">
                            </li>
                        </ul>
                    </div>
                    break;
                case 2:
                    <div style="text-align: left;">
                        <button type="button" class="btn btn-outline-primary" @onclick=ClearConsole title="Clear Console">
                            <span class="oi oi-reload"></span>
                            <span class="oi oi-terminal"></span>
                            Clear
                        </button>
                    </div>
                    <h2 class="text-center">
                        Console
                    </h2>
                    <ul class="list-group list-group-flush w-100" style="text-align: left;">
                        @foreach (var item in console)
                        {
                            @((MarkupString)item)
                        }
                    </ul>
                    break;
                case 3:
                    foreach (var item in controller.Generation)
                    {
                        <NetworkCard Network=@item></NetworkCard>
                    }
                    break;
                case 4:
                    <li class="list-group-item align-items-center form-group">
                        <div class="btn-group w-100 my-2" role="group" aria-label="Basic example">
                            <button type="button" class="btn btn-outline-primary" @onclick=controller.SpeciateGeneration title="Speciate">
                                Speciate
                            </button>
                        </div>
                    </li>
                    int index = 0;
                    foreach (var item in controller.Species)
                    {
                        <div class="card d-inline-flex mx-1 my-1">
                            <div class="card-header" style="text-align: center;">
                                <h3>
                                    @index
                                    <span class="badge bg-primary">@item.Length</span>
                                </h3>

                            </div>
                            <div class="card-body" style="text-align: center;">
                                <div class="card-text my-2">
                                    Representative
                                    <div>
                                        @{
                                            int rep = controller.SpeciesRepresentatives[index];
                                        }
                                        <span class="badge bg-dark">@((MarkupString)$"{rep} {controller.Generation[rep].Name}")</span>
                                    </div>
                                </div>
                                <ListGroup Stripe="true" Items=@(item.Select(x=>(object)($"{x} {controller.Generation[x].Name} <div><span class=\"badge bg-warning\">{controller.Generation[x].Innovations.Length}</span> <span class=\"badge bg-primary\">{controller.Generation[x].Count}</span> <span class=\"badge bg-dark\">{controller.Generation[x].NodeLayers.Length}</span></div>")).ToArray())></ListGroup>
                            </div>
                        </div>
                        index++;
                    }
                    break;
                case 5:
                    <li class="list-group-item align-items-center form-group" style="max-width: 40%;">
                        <div class="btn-group w-100 my-2" role="group" aria-label="Basic example">
                            <span class="input-group-text" id="addon-wrapping">Data</span>
                            <button class="btn btn-primary btn-lg dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @(string.Join(", ", EvalData[selectedData]))
                            </button>
                            <ul class="dropdown-menu" style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                                @for (int i = 0; i < EvalData.Length; i++)
                                {
                                    int x = i;
                                    <li>
                                        <button class=@networkButtonColors[x % networkButtonColors.Length] type="button" @onclick="()=>selectedData = x">@(string.Join(", ", EvalData[x]))</button>
                                    </li>
                                }
                            </ul>
                            <button type="button" class="btn btn-outline-primary" @onclick=EvaluateGeneration title="Speciate">
                                Evaluate Once
                            </button>
                            @if (Evaluating)
                            {
                                <div class="input-group-text" id="addon-wrapping">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                            <button type="button" class="btn btn-outline-primary" @onclick=ReproduceGeneration title="Speciate">
                                Reproduce
                            </button>
                            @if (Reproducing)
                            {
                                <div class="input-group-text" id="addon-wrapping">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                            <button type="button" class="btn btn-outline-primary" @onclick=ReproduceGenerationMultiple title="Speciate">
                                Reproduce And Eval All Data
                            </button>
                            @if (Reproducing)
                            {
                                <div class="input-group-text" id="addon-wrapping">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </li>
                    @if (Fitnesses != default)
                    {
                        index = 0;
                        foreach (var item in Fitnesses.Fitnesses)
                        {
                            <div class="card d-inline-flex mx-1 my-1">
                                <div class="card-header" style="text-align: center;">
                                    <h3>
                                        Species
                                    </h3>
                                    @item.Species
                                    <span class="badge bg-primary">@(Math.Round(item.Fitness,2))</span>
                                </div>
                                <div class="card-body" style="text-align: center;">
                                    <ListGroup Stripe="true" Items=@(item.Fitnesses.Select(x=>(object)($"{Math.Round(x,2)}")).ToArray())></ListGroup>
                                </div>
                            </div>
                            index++;
                        }
                    }
                    break;
            }
        }
    </TabGroup>
</div>
@code {

    SpeciesController<NeatNueralNetwork> controller = new(3, 2);

    (ISpeciesFitness<double>[] Fitnesses, double GenerationFitness) Fitnesses;

    NeatNueralNetwork childNetwork = null;

    INeatNetwork left => controller.Generation[selectedLeftItem];
    INeatNetwork right => controller.Generation[selectedRightItem];

    List<IMatrix<double>> MatricesToShow = new();

    int selectedData = 0;

    double[][] EvalData = {
        new double[]{ 0, 1 },
        new double[]{ 1, 0 },
        new double[]{ 1, 1 },
        new double[]{ 0, 0 },
    };

    double[] EvalExpected = {
        1,
        1,
        0,
        0
    };

    int _selectedLeftItem = 0;
    int selectedLeftItem
    {
        get => _selectedLeftItem;
        set
        {
            _selectedLeftItem = value;
            InvokeAsync(RedrawCanvas);
        }
    }

    int _selectedRightItem = 1;
    int selectedRightItem
    {
        get => _selectedRightItem;
        set
        {
            _selectedRightItem = value;
            InvokeAsync(RedrawCanvas);
        }
    }

    int startingInputNodes = 2;
    int startingOutputNodes = 1;
    int startingMaxNetworks = 50;
    int minNodes = 1;
    int maxNodes = 20;
    int maxNetworks = 100;

    int startingNetworks = 2;

    private int MutationsPerClick = 1;
    private int MaxMutationsPC = 1000;
    private int MinMutationsPC = 1;
    private int MutationsPCStep = 20;

    private double MutationModifier
    {
        get => left.Mutater.WeightMutationModifier;
        set
        {
            InvokeOnNetworks(x => x.Mutater.WeightMutationModifier = value);
        }
    }
    private double MaxMutationModifier = 1;
    private double MinMutationModifier = 0.001;

    private string ReassignChanceProgressSize => $"{(int)(ReassignChance * 100)}";
    private string PerturbChanceProgressSize => $"{(int)(PerturbChance * 100)}";
    private string RemainingWeightProgressSize => $"{(int)((1d - ReassignChance - PerturbChance) * 100)}";

    private double ReassignChance
    {
        get => left.Mutater.WeightReassignmentChance;
        set
        {
            double val = Clamp(value, 1 - PerturbChance);
            InvokeOnNetworks(x => x.Mutater.WeightReassignmentChance = val);
        }
    }
    private double MaxReassignChance = 1;
    private double MinReassignChance = 0.001;

    private double PerturbChance
    {
        get => left.Mutater.MutateWeightChance;
        set
        {
            double val = Clamp(value, 1 - ReassignChance);
            InvokeOnNetworks(x => x.Mutater.MutateWeightChance = val);
        }
    }
    private double MaxPerturbChance = 1;
    private double MinPerturbChance = 0.001;

    private string AddNodeProgressSize => $"{(int)(AddNodeChance * 100)}";
    private string AddConnectionProgressSize => $"{(int)(AddConnectionChance * 100)}";
    private string RemainingProgressSize => $"{(int)((1d - AddNodeChance - AddConnectionChance) * 100)}";

    private double AddNodeChance
    {
        get => left.Mutater.AddNodeChance;
        set
        {
            double val = Clamp(value, 1 - AddConnectionChance);
            InvokeOnNetworks(x => x.Mutater.AddNodeChance = value);
        }
    }
    private double MaxAddNodeChance = 1;
    private double MinAddNodeChance = 0.001;

    private double AddConnectionChance
    {
        get => left.Mutater.AddConnectionChance;
        set
        {
            double val = Clamp(value, 1 - AddNodeChance);
            InvokeOnNetworks(x => x.Mutater.AddConnectionChance = value);
        }
    }
    private double MaxAddConnectionChance = 1;
    private double MinAddConnectionChance = 0.001;

    private FitnessState parentFitnessState = FitnessState.EqualFitness;

    string[] buttonTypes = {
        "primary",
        "secondary",
        "success",
        "danger",
        "warning",
        "info",
        "light",
        "dark",
    };

    string[] networkButtonColors = {
        "dropdown-item list-group-item-primary",
        "dropdown-item list-group-item-secondary",
        "dropdown-item list-group-item-success",
        "dropdown-item list-group-item-danger",
        "dropdown-item list-group-item-warning",
        "dropdown-item list-group-item-info",
        "dropdown-item list-group-item-light",
        "dropdown-item list-group-item-dark"
    };

    public int Width = 200;
    public int Height = 200;

    private bool Evaluating = false;
    private bool Reproducing = false;

    CancellationTokenSource TokenSource = new();

    Random Rng = new();

    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    private TabGroup TabGroupRef;

    private TabGroup SelectedNetworkTabGroup;

    List<string> console = new();

    System.Diagnostics.Stopwatch watch = new();

    async Task<string> GetName()
    {
        string name = "<span style=\"font-size:25px\">";

        async Task<string> emojiName()
        {
            int num = await NeuroSharp.Helpers.Random.NextAsync(0, 61);
            return $" &#1280{(num < 10 ? $"0{num}" : num)};";
        }

        name += await emojiName();
        name += await emojiName();
        name += await emojiName();

        name += "</span>";

        return name;
    }

    private void InvokeOnNetworks(Action<INeatNetwork> expression)
    {
        for (int i = 0; i < controller.Generation.Length; i++)
        {
            expression(controller.Generation[i]);
        }
    }

    private async Task Breed()
    {
        IInnovation[] derivedGenome = controller.NetworkComparer.DeriveGenome(left, right, parentFitnessState);

        childNetwork = (NeatNueralNetwork)await left.CreateAsync(left.InputNodes, left.OutputNodes, derivedGenome);

        childNetwork.Name = await GetName();

        Log($"Created network {childNetwork.Name}", MsgType.warning);

        await RedrawCanvas();
    }

    private double Clamp(double value, double upper, double lower = 0d)
    {
        // im sorry this was so easy to write but looks like cancer
        return value > upper ? upper : value < lower ? lower : value;
    }

    private enum MsgType
    {
        none,
        warning,
        error,
        success
    }

    private async Task ClearConsole()
    {
        console.Clear();
        await Task.Run(() => System.Threading.Thread.Sleep(100));
        Log("Console Cleared", MsgType.success);
    }

    private void Log(string msg, MsgType msgType = MsgType.none)
    {
        switch (msgType)
        {
            case MsgType.none:
                console.Insert(0, $"<li class=\"list-group-item\">{watch.ElapsedMilliseconds} ms:\t{msg}</li>");
                break;
            case MsgType.warning:
                console.Insert(0, $"<li class=\"list-group-item list-group-item-warning\">{watch.ElapsedMilliseconds} ms:\t{msg}</li>");
                break;
            case MsgType.error:
                console.Insert(0, $"<li class=\"list-group-item list-group-item-danger\">{watch.ElapsedMilliseconds} ms:\t{msg}</li>");
                break;
            case MsgType.success:
                console.Insert(0, $"<li class=\"list-group-item list-group-item-success\">{watch.ElapsedMilliseconds} ms:\t{msg}</li>");
                break;
        }

    }

    private async Task AddNode(INeatNetwork network)
    {
        Log($"Adding Node", MsgType.warning);
        var result = await ((DefaultMutater)network.Mutater).AddNode(network);

        // re draw the UI
        await RedrawCanvas();

        switch (result)
        {
            case AddNodeResult.success:
                Log($"Added node", MsgType.success);
                break;
            case AddNodeResult.error:
                Log($"Failed to add node: error occurred", MsgType.warning);
                break;
            case AddNodeResult.alreadyExists:
                Log($"Failed to add node: connection already exists", MsgType.warning);
                break;
            case AddNodeResult.noEligibleConnections:
                Log($"Failed to add node: no eligible connections", MsgType.warning);
                break;
        }
    }

    private async Task AddConnection(INeatNetwork network)
    {
        Log($"Adding Connection", MsgType.warning);
        AddConnectionResult result = await ((DefaultMutater)network.Mutater).AddConnection(network);

        // re draw the UI
        await RedrawCanvas();

        switch (result)
        {
            case AddConnectionResult.success:
                Log($"Added Connection", MsgType.success);
                break;
            case AddConnectionResult.error:
                Log($"Failed to add connection: error occurred", MsgType.warning);
                break;
            case AddConnectionResult.alreadyExists:
                Log($"Failed to add connection: connection already exists", MsgType.warning);
                break;
            case AddConnectionResult.noEligibleNodes:
                Log($"Failed to add connection: no eligible nodes", MsgType.warning);
                break;
            case AddConnectionResult.circularConnection:
                Log($"Failed to add connection: avoided circular connection", MsgType.warning);
                break;
        }
    }

    private async Task Mutate(INeatNetwork network)
    {
        for (int i = 0; i < MutationsPerClick; i++)
        {
            await network.Mutate();
        }
        network.GeneratePhenotype();
        await RedrawCanvas();
        Log($"Mutated: {MutationsPerClick} times.");
    }

    private async Task MutateLeft() => await Mutate(left);

    private async Task MutateRight() => await Mutate(right);

    private async Task AddNodeRight() => await AddNode(right);

    private async Task AddConnectionRight() => await AddConnection(right);

    private async Task ShowMatrices(INeatNetwork network)
    {
        // make the network make the matrices
        network.GeneratePhenotype();

        MatricesToShow.Clear();

        StateHasChanged();
        await InvokeAsync(() => StateHasChanged());

        for (int i = 0; i < network.Matrices.Length; i++)
        {
            MatricesToShow.Add(network.Matrices[i]);
        }

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ShowMatriceLeft()
    {
        await ShowMatrices(left);

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ShowMatriceRight()
    {
        await ShowMatrices(right);

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task EvaluateGeneration()
    {
        if (Evaluating)
        {
            TokenSource.Cancel();
            TokenSource = new();
            Log("Cancelled evaluation", MsgType.warning);
            return;
        }

        Evaluating = true;

        double[] data = EvalData[selectedData];

        double expected = EvalExpected[selectedData];

        Log($"Started Evaluation with data {string.Join(", ", data)}", MsgType.none);

        controller.FitnessFunction.Function = (ref double[] result) => expected - result[0];

        Fitnesses = await controller.EvaluateGeneration(data, TokenSource.Token);

        Log($"Finished Evaluation with data {string.Join(", ", data)}", MsgType.success);

        Evaluating = false;
    }

    private async Task ReproduceGenerationMultiple()
    {
        if (Reproducing)
        {
            TokenSource.Cancel();
            TokenSource = new();
            Log("Cancelled reproduction", MsgType.warning);
            return;
        }

        Reproducing = true;

        // get an average fitness for numerous organisms

        await EvaluateGeneration();

        (ISpeciesFitness<double>[] Fitnesses, double GenerationFitness) AverageFitnesses = Fitnesses;

        for (int i = 0; i < 10; i++)
        {
            selectedData = await NeuroSharp.Helpers.Random.NextAsync(0, EvalData.Length);

            double[] data = EvalData[selectedData];

            double expected = EvalExpected[selectedData];

            Log($"Started Evaluation with data {string.Join(", ", data)}", MsgType.none);

            controller.FitnessFunction.Function = (ref double[] result) => expected - result[0];

            Fitnesses = await controller.EvaluateGeneration(data, TokenSource.Token);

            for (int x = 0; x < AverageFitnesses.Fitnesses.Length; x++)
            {
                AverageFitnesses.Fitnesses[x].Fitness = (AverageFitnesses.Fitnesses[x].Fitness + Fitnesses.Fitnesses[x].Fitness) / 2;
                for (int y = 0; y < AverageFitnesses.Fitnesses[x].Fitnesses.Length; y++)
                {
                    AverageFitnesses.Fitnesses[x].Fitnesses[y] = (AverageFitnesses.Fitnesses[x].Fitnesses[y] + Fitnesses.Fitnesses[x].Fitnesses[y]) / 2;
                }
            }
            AverageFitnesses.GenerationFitness = (Fitnesses.GenerationFitness + AverageFitnesses.GenerationFitness) / 2;
        }

        await controller.Reproduce(AverageFitnesses.Fitnesses, AverageFitnesses.GenerationFitness);

        Reproducing = false;
    }

    private async Task ReproduceGeneration()
    {
        if (Reproducing)
        {
            TokenSource.Cancel();
            TokenSource = new();
            Log("Cancelled reproduction", MsgType.warning);
            return;
        }

        Reproducing = true;

        double[] data = EvalData[selectedData];

        double expected = EvalExpected[selectedData];

        Log($"Started reproduction", MsgType.none);

        await controller.Reproduce(Fitnesses.Fitnesses, Fitnesses.GenerationFitness);

        Log($"Finished reproduction", MsgType.success);

        Reproducing = false;
    }

    private async Task ResetAll()
    {
        controller = new SpeciesController<NeatNueralNetwork>(startingInputNodes, startingOutputNodes);

        controller.MaxPopulation = startingMaxNetworks;

        await controller.CreateInitialPopulation(startingInputNodes, startingOutputNodes);

        // assign the new names for the population
        foreach (var item in controller.Generation)
        {
            item.Name = await GetName();
        }

        selectedLeftItem = 0;
        selectedRightItem = 1;
        childNetwork = null;

        MatricesToShow.Clear();

        await RedrawCanvas();

        console.Clear();

        Log($"Created {startingNetworks} networks.", MsgType.success);
    }

    private async Task ResetLeft()
    {
        controller.Generation[selectedLeftItem] = new NeatNueralNetwork(startingInputNodes, startingOutputNodes) { Name = await GetName() };
        Log("Reset left network.", MsgType.success);
        MatricesToShow.Clear();
        await RedrawCanvas();
    }

    private async Task ResetRight()
    {
        controller.Generation[selectedRightItem] = new NeatNueralNetwork(startingInputNodes, startingOutputNodes) { Name = await GetName() };
        Log("Reset right network.", MsgType.success);
        MatricesToShow.Clear();
        await RedrawCanvas();
    }

    private async Task AddNodeLeft() => await AddNode(left);

    private async Task AddConnectionLeft() => await AddConnection(left);

    public async Task ResetController()
    {
        controller = new(startingInputNodes, startingOutputNodes);
        await InvokeAsync(() => StateHasChanged());

    }

    public async Task RedrawCanvas()
    {
        await NeuroSharp.Helpers.Random.Sleep(10);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ResetAll();

        await controller.SpeciateGeneration();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            watch.Start();



            await RedrawCanvas();


            Log("Started Application", MsgType.success);

            await InvokeAsync(() => StateHasChanged());
        }
    }
}
