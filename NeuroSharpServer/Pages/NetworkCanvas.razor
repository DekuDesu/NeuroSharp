@using NeuroSharp.NEAT
@using System.IO;
@using System.Threading;
@using NeuroSharp;

@inherits CanvasBase

<BECanvas Width=@Width Height=@Height @ref=_canvasReference></BECanvas>

@code {

    [Parameter]
    public INeatNetwork Network { get; set; }

    [Parameter]
    public float NodeSize { get; set; } = 10f;

    [Parameter]
    public float VerticalNodeSpacing { get; set; } = 50f;

    [Parameter]
    public float LineWidth { get; set; } = 2f;

    private Canvas2DContext _context;
    private BECanvasComponent _canvasReference;

    public (int Width, int Height) CalculateSize(INeatNetwork network)
    {
        float distanceBetweenNodes = VerticalNodeSpacing + NodeSize;
        float width = (network.NodeLayers.Length * distanceBetweenNodes) + distanceBetweenNodes;
        // find max nodes
        int maxLayerCount = 0;
        for (int i = 0; i < network.NodeLayers.Length; i++)
        {
            int size = network.NodeLayers[i].Length;
            if (size > maxLayerCount)
            {
                maxLayerCount = size;
            }
        }

        float height = (VerticalNodeSpacing + NodeSize) * (maxLayerCount + 1);

        return ((int)width, (int)height);
    }

    private async Task DrawPhenotype(NeatNueralNetwork nn, int x, int y)
    {
        List<Node> nodes = CalculateNodes(nn, x, y);

        // draw the connections
        for (int i = 0; i < nn.Innovations.Length; i++)
        {
            if (nn.Innovations[i].Enabled is false)
            {
                continue;
            }

            var left = nodes.Where(x => x.Id == nn.Innovations[i].InputNode).FirstOrDefault();
            var right = nodes.Where(x => x.Id == nn.Innovations[i].OutputNode).FirstOrDefault();

            float startX = left.x;
            float startY = left.y;
            float endX = right.x - (NodeSize * 2);
            float endY = right.y;

            await DrawArrow(startX, startY, endX, endY, Colors.Rainbow[nn.Innovations[i].InputNode % Colors.Rainbow.Length], LineWidth);
        }

        foreach (var item in nodes)
        {
            await DrawNode(item.x, item.y, item.Id, item.NodeType, Colors.Rainbow[item.Id % Colors.Rainbow.Length]);
        }
    }

    private List<Node> CalculateNodes(NeatNueralNetwork nn, int x, int y)
    {
        Span<int[]> layers = nn.NodeLayers;

        if (layers.Length is 0)
        {
            return new();
        }

        // create a place to store the new nodes we calculate
        List<Node> nodes = new(nn.Count);

        float distanceBetweenNodes = VerticalNodeSpacing + NodeSize;

        // input nodes
        Span<int> inputNodes = layers[1];

        // layer node spacing allows us to center the nodes verically
        /*
            height = 7, nodeCount = 3
            layerNodeSpacing = height / (nodeCount + 1) = A
            layerNodeSpacing = height / (nodeCount) = B
            layerNodeSpacing * (i + 1) = C
            layerNodeSpacing * (i) = D
            0               AD  BD
            1   A       AC  AD
            2       B       AD  BD
            3   A       AC
            5       B           BD
            6   A       AC
            7       B
        */
        float layerNodeSpacing = Height / (nn.InputNodes + 1);

        // shift the nodes a little to the right so they don't appear inside the border of the canvas
        float inputX = x + (distanceBetweenNodes / 2);

        for (int i = 0; i < inputNodes.Length; i++)
        {
            float nodeY = layerNodeSpacing * (i + 1);

            nodes.Add(new Node(inputNodes[i], inputX, nodeY, NodeType.Input));
        }

        // get the height of the square of the phenotype so we can center nodes
        float height = nodes[^1].y - y;

        float outputX = x + ((layers.Length) * distanceBetweenNodes);

        var outputs = layers[0];

        layerNodeSpacing = Height / (nn.OutputNodes + 1);
        for (int i = 0; i < outputs.Length; i++)
        {
            //float nodeY = y + (distanceBetweenNodes * i) + (distanceBetweenNodes / 2 * (inputNodes.Length - outputs.Length));
            float nodeY = layerNodeSpacing * (i + 1);

            nodes.Add(new Node(outputs[i], outputX, nodeY, NodeType.Output));
        }

        int previousLayerCount = inputNodes.Length;

        // draw the hidden nodes
        for (int layer = 2; layer < layers.Length; layer++)
        {
            layerNodeSpacing = (Height / (layers[layer].Length + 1));

            float nodeX = x + (layer * distanceBetweenNodes);

            for (int nodeIdex = 0; nodeIdex < layers[layer].Length; nodeIdex++)
            {
                int node = layers[layer][nodeIdex];

                float nodeY = layerNodeSpacing * (nodeIdex + 1);

                nodes.Add(new Node(node, nodeX, nodeY, NodeType.Hidden));
            }
            previousLayerCount = layers[layer].Length;
        }

        return nodes;
    }

    private async Task DrawNode(float x, float y, int id, NodeType node, string FillColor = Colors.White, string StrokeColor = Colors.Black)
    {
        float nodeSize = 10;
        float textPosition = y + (nodeSize * 2);

        await DrawCircle(x, y, nodeSize, 3, true, StrokeColor, FillColor);

        await DrawText(x, textPosition, $"{id}\n{node}", 10f, Colors.Black);
    }

    public override async Task RedrawCanvas()
    {
        if (Network is null)
        {
            return;
        }

        (Width, Height) = CalculateSize(Network);

        await Clear();

        await DrawPhenotype((NeatNueralNetwork)Network, 0, 0);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        (Width, Height) = CalculateSize(Network);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();

            base.SetContext(_context);

            await RedrawCanvas();

            await InvokeAsync(() => StateHasChanged());
        }

        await RedrawCanvas();
    }

    private struct Node
    {
        public int Id { get; set; }
        public float x { get; set; }
        public float y { get; set; }
        public NodeType NodeType { get; set; }

        public Node(int Id, float X, float Y, NodeType NodeType)
        {
            this.Id = Id;
            this.x = X;
            this.y = Y;
            this.NodeType = NodeType;
        }
    }
}
